{"version":3,"names":["GLTF","require","_sfc_main","data","THREE","scene","camera","renderer","canvas","revolver","cylinder","bullets","currentChamber","isSpinning","animationFrameId","canvasWidth","canvasHeight","isDragging","previousTouch","x","y","rotationSpeed","currentRotation","Math","PI","mounted","_this","_asyncToGenerator2","_regeneratorRuntime2","mark","_callee","sysInfo","query","gl","wrap","_callee$","_context","prev","next","Promise","resolve","setTimeout","common_vendor","index","getSystemInfoSync","windowWidth","windowHeight","createSelectorQuery","in","reject","select","node","exec","res","Error","sent","markRaw","getContext","alpha","antialias","premultipliedAlpha","preserveDrawingBuffer","initThree","animate","t0","__f__","stop","methods","_this2","_callee2","pixelRatio","ambientLight","mainLight","fillLight","_callee2$","_context2","width","height","dist","createScopedThreejs","GLTFLoader","Scene","PerspectiveCamera","position","set","lookAt","WebGLRenderer","context","setPixelRatio","setSize","setClearColor","AmbientLight","add","DirectionalLight","background","Color","loadGLTFModel","_this3","_callee3","fileData","loader","gltf","scale","_callee3$","_context3","fs","getFileSystemManager","readFile","filePath","encoding","success","fail","err","parse","gltf2","error","rotation","traverse","child","name","toLowerCase","includes","_this4","render","requestAnimationFrame","spinCylinder","_this5","rotations","random","duration","startTime","Date","now","spin","elapsed","progress","angle","pow","floor","showToast","title","icon","pullTrigger","onTouchStart","event","touch","touches","clientX","clientY","onTouchMove","deltaX","deltaY","max","min","onTouchEnd","beforeDestroy","cancelAnimationFrame","wx","createPage","MiniProgramPage"],"sources":["revolver.vue","revolver.vue?type=page"],"sourcesContent":["<template>\n    <view class=\"container\">\n        <canvas type=\"webgl\" id=\"webgl\" class=\"webgl-canvas\"\n            @touchstart=\"onTouchStart\"\n            @touchmove=\"onTouchMove\"\n            @touchend=\"onTouchEnd\">\n        </canvas>\n        <view class=\"controls\">\n            <button class=\"spin-btn\" @tap=\"spinCylinder\">旋转弹仓</button>\n            <button class=\"fire-btn\" @tap=\"pullTrigger\">开火</button>\n        </view>\n    </view>\n</template>\n\n<script>\nimport { createScopedThreejs } from 'threejs-miniprogram'\nimport { markRaw } from 'vue'\nconst GLTF = require('threejs-miniprogram/GLTF')\n\nexport default {\n    data() {\n        return {\n            THREE: null,\n            scene: null,\n            camera: null,\n            renderer: null,\n            canvas: null,\n            revolver: null,\n            cylinder: null,\n            bullets: [true, false, false, false, false, false],\n            currentChamber: 0,\n            isSpinning: false,\n            animationFrameId: null,\n            canvasWidth: 0,\n            canvasHeight: 0,\n            isDragging: false,\n            previousTouch: {\n                x: 0,\n                y: 0\n            },\n            rotationSpeed: 0.01,\n            currentRotation: {\n                x: 0,\n                y: Math.PI / 12\n            }\n        }\n    },\n    \n    async mounted() {\n        try {\n            // 增加延迟确保 canvas 节点已经准备好\n            await new Promise(resolve => setTimeout(resolve, 1000));\n            \n            const sysInfo = uni.getSystemInfoSync();\n            this.canvasWidth = sysInfo.windowWidth;\n            this.canvasHeight = sysInfo.windowHeight;\n            \n            // 获取 canvas 上下文\n            const query = uni.createSelectorQuery().in(this);\n            const canvas = await new Promise((resolve, reject) => {\n                query.select('#webgl')\n                    .node()\n                    .exec((res) => {\n                        if (res[0] && res[0].node) {\n                            resolve(res[0].node);\n                        } else {\n                            reject(new Error('Canvas element not found'));\n                        }\n                    });\n            });\n            \n            this.canvas = markRaw(canvas);\n            const gl = canvas.getContext('webgl', {\n                alpha: true,\n                antialias: true,\n                premultipliedAlpha: false,\n                preserveDrawingBuffer: false\n            });\n            \n            if (!gl) {\n                throw new Error('WebGL context not available');\n            }\n            \n            await this.initThree();\n            this.animate();\n        } catch (error) {\n            console.error('Initialization error:', error);\n        }\n    },\n    \n    methods: {\n        async initThree() {\n            const canvas = this.canvas;\n            const sysInfo = uni.getSystemInfoSync();\n            const pixelRatio = sysInfo.pixelRatio || 1;\n            \n            canvas.width = this.canvasWidth * pixelRatio;\n            canvas.height = this.canvasHeight * pixelRatio;\n            \n            try {\n                this.THREE = markRaw(createScopedThreejs(canvas));\n                this.THREE.GLTFLoader = GLTF.GLTFLoader;\n                \n                this.scene = markRaw(new this.THREE.Scene());\n                \n                // 创建相机\n                this.camera = markRaw(new this.THREE.PerspectiveCamera(\n                    45,\n                    this.canvasWidth / this.canvasHeight,\n                    0.1,\n                    1000\n                ));\n                this.camera.position.set(0, 0.1, 2);\n                this.camera.lookAt(0, 0, 0);\n                \n                // 创建渲染器\n                this.renderer = markRaw(new this.THREE.WebGLRenderer({\n                    canvas,\n                    context: canvas.getContext('webgl'),\n                    antialias: true,\n                    alpha: true\n                }));\n                \n                this.renderer.setPixelRatio(pixelRatio);\n                this.renderer.setSize(this.canvasWidth, this.canvasHeight);\n                this.renderer.setClearColor(0xdddddd, 0);\n                \n                // 添加灯光\n                const ambientLight = markRaw(new this.THREE.AmbientLight(0xffffff, 0.4));\n                this.scene.add(ambientLight);\n                \n                const mainLight = markRaw(new this.THREE.DirectionalLight(0xffffff, 0.8));\n                mainLight.position.set(2, 2, 2);\n                this.scene.add(mainLight);\n                \n                const fillLight = markRaw(new this.THREE.DirectionalLight(0xffffff, 0.4));\n                fillLight.position.set(-2, -1, 2);\n                this.scene.add(fillLight);\n                \n                // 添加背景色\n                this.scene.background = new this.THREE.Color(0xdddddd);\n                \n                // 加载模型\n                await this.loadGLTFModel();\n                \n            } catch (error) {\n                console.error('THREE.js initialization error:', error);\n                throw error;\n            }\n        },\n        \n        async loadGLTFModel() {\n            try {\n                // 读取模型文件\n                const fileData = await new Promise((resolve, reject) => {\n                    const fs = uni.getFileSystemManager();\n                    fs.readFile({\n                        filePath: '/static/src/xar_revolver/scene.gltf',\n                        encoding: 'utf-8',\n                        success: (res) => {\n                            resolve(res.data);\n                        },\n                        fail: (err) => {\n                            console.error('Read file failed:', err);\n                            reject(err);\n                        }\n                    });\n                });\n\n                // 创建加载器并解析模型\n                const loader = new this.THREE.GLTFLoader();\n                const gltf = await new Promise((resolve, reject) => {\n                    loader.parse(\n                        fileData,\n                        '',\n                        (gltf) => {\n                            resolve(gltf);\n                        },\n                        (error) => {\n                            console.error('Parse GLTF failed:', error);\n                            reject(error);\n                        }\n                    );\n                });\n\n                // 设置模型\n                this.revolver = markRaw(gltf.scene);\n                \n                // 调整模型比例和位置\n                const scale = 0.35; // 可以根据需要调整\n                this.revolver.scale.set(scale, scale, scale);\n                this.revolver.position.set(-0.3, 0, 0);\n                this.revolver.rotation.y = this.currentRotation.y;\n                this.revolver.rotation.x = this.currentRotation.x;\n\n                // 遍历模型查找弹仓\n                this.revolver.traverse((child) => {\n                    if (child.name.toLowerCase().includes('cylinder')) {\n                        this.cylinder = child;\n                    }\n                });\n\n                // 添加到场景\n                this.scene.add(this.revolver);\n\n            } catch (error) {\n                console.error('Model loading failed:', error);\n                throw error;\n            }\n        },\n        \n        animate() {\n            const animate = () => {\n                if (this.renderer && this.scene && this.camera) {\n                    this.renderer.render(this.scene, this.camera);\n                }\n                \n                if (this.canvas) {\n                    this.animationFrameId = this.canvas.requestAnimationFrame(animate);\n                }\n            };\n            \n            if (this.canvas) {\n                this.canvas.requestAnimationFrame(animate);\n            }\n        },\n        \n        spinCylinder() {\n            if (this.isSpinning) return\n            \n            this.isSpinning = true\n            const rotations = 2 + Math.random() * 4\n            const duration = 2000\n            const startTime = Date.now()\n            \n            const spin = () => {\n                const elapsed = Date.now() - startTime\n                const progress = elapsed / duration\n                \n                if (progress < 1) {\n                    const angle = rotations * Math.PI * 2 * (1 - Math.pow(1 - progress, 3))\n                    this.cylinder.rotation.x = angle\n                    this.canvas.requestAnimationFrame(spin)\n                } else {\n                    this.isSpinning = false\n                    this.currentChamber = Math.floor(Math.random() * 6)\n                    uni.showToast({\n                        title: '弹仓已旋转',\n                        icon: 'none'\n                    })\n                }\n            }\n            \n            spin()\n        },\n        \n        pullTrigger() {\n            if (this.isSpinning) return\n            \n            if (this.bullets[this.currentChamber]) {\n                uni.showToast({\n                    title: '砰！',\n                    icon: 'none'\n                })\n            } else {\n                uni.showToast({\n                    title: '咔！',\n                    icon: 'none'\n                })\n            }\n            \n            this.currentChamber = (this.currentChamber + 1) % 6\n        },\n        \n        onTouchStart(event) {\n            this.isDragging = true;\n            const touch = event.touches[0];\n            this.previousTouch.x = touch.clientX;\n            this.previousTouch.y = touch.clientY;\n        },\n        \n        onTouchMove(event) {\n            if (!this.isDragging) return;\n            \n            const touch = event.touches[0];\n            const deltaX = touch.clientX - this.previousTouch.x;\n            const deltaY = touch.clientY - this.previousTouch.y;\n\n            // 更新旋转角度\n            this.currentRotation.y += deltaX * this.rotationSpeed;\n            this.currentRotation.x += deltaY * this.rotationSpeed;\n\n            // 限制垂直旋转范围\n            this.currentRotation.x = Math.max(-Math.PI / 3, Math.min(Math.PI / 3, this.currentRotation.x));\n\n            // 应用旋转\n            if (this.revolver) {\n                this.revolver.rotation.y = this.currentRotation.y;\n                this.revolver.rotation.x = this.currentRotation.x;\n            }\n\n            // 更新前一个触摸点\n            this.previousTouch.x = touch.clientX;\n            this.previousTouch.y = touch.clientY;\n        },\n        \n        onTouchEnd(event) {\n            this.isDragging = false;\n        },\n        \n        beforeDestroy() {\n            if (this.animationFrameId && this.canvas) {\n                this.canvas.cancelAnimationFrame(this.animationFrameId);\n            }\n        }\n    }\n}\n</script>\n\n<style>\n.container {\n    width: 100vw;\n    height: 100vh;\n    position: relative;\n    background-color: #dddddd;\n}\n\n.webgl-canvas {\n    width: 100%;\n    height: 100%;\n    touch-action: none;\n}\n\n.controls {\n    position: fixed;\n    bottom: 40rpx;\n    left: 0;\n    right: 0;\n    display: flex;\n    justify-content: center;\n    gap: 40rpx;\n    padding: 0 40rpx;\n}\n\n.spin-btn,\n.fire-btn {\n    flex: 1;\n    max-width: 300rpx;\n    padding: 20rpx;\n    border-radius: 10rpx;\n    background: rgba(255, 0, 222, 0.8);\n    color: white;\n    border: none;\n    font-size: 32rpx;\n}\n\n.fire-btn {\n    background: rgba(255, 0, 0, 0.8);\n}\n</style> ","import MiniProgramPage from '/Users/weitao/Desktop/ThinGift/drink-app/pages/game/revolver.vue'\nwx.createPage(MiniProgramPage)"],"mappings":"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","ignoreList":[]}